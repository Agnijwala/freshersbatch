> use mongo_practice
switched to db mongo_practice
> db.movies.find().pretty()
{
        "_id" : ObjectId("62a413ed8258c5366107fdf8"),
        "title" : "Fight Club",
        "writer" : "Chuck Palahniuko",
        "year" : 1999,
        "actors" : [
                "Brad Pitt",
                "Edward Norton"
        ]
}
{
        "_id" : ObjectId("62a413ed8258c5366107fdf9"),
        "title" : "Pulp Fiction",
        "eriter" : "Quentin Tarantino",
        "year" : 1994,
        "actors" : [
                "Jhon Travolta",
                "Uma Thurman"
        ],
        "actor" : "Samuel L.jackson"
}
{
        "_id" : ObjectId("62a413ed8258c5366107fdfa"),
        "title" : "Inglorious Basterds",
        "writer" : "Quentin Tarantino",
        "year" : 2009,
        "actors" : [
                "Brad Pitt",
                "Diane Kruger",
                "Eli Roth"
        ]
}
{
        "_id" : ObjectId("62a413ed8258c5366107fdfb"),
        "title" : "The Hobbit:An Unexpected journey",
        "writer" : "J.R.R.Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "A reluctant hobbit,Bilbo Baggins,set out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug"
}
{
        "_id" : ObjectId("62a413ed8258c5366107fdfc"),
        "title" : "The Hobbit:The Desolation Of Smaug",
        "writer" : "J.R.R.Tolkein",
        "year" : 2013,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("62a413ed8258c5366107fdfd"),
        "title" : "The Hobbit:The Battle Of the Five Armies",
        "writer" : "J.R.R.Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Mountain from falling into the hands of a rising darkness"
}
{
        "_id" : ObjectId("62a413ed8258c5366107fdfe"),
        "title" : "Pee Wee Herman's Big Adventure"
}
{ "_id" : ObjectId("62a413ed8258c5366107fdff"), "title" : "Avatar" }
> db.movies.find({"by":"Quentin Tarantino"}).pretty()
> db.movies.find({"writer":"Quentin Tarantino"}).pretty()
{
        "_id" : ObjectId("62a413ed8258c5366107fdfa"),
        "title" : "Inglorious Basterds",
        "writer" : "Quentin Tarantino",
        "year" : 2009,
        "actors" : [
                "Brad Pitt",
                "Diane Kruger",
                "Eli Roth"
        ]
}
> db.movies.find({"actors":{$in:["Brad Pitt"]}}).pretty()
{
        "_id" : ObjectId("62a413ed8258c5366107fdf8"),
        "title" : "Fight Club",
        "writer" : "Chuck Palahniuko",
        "year" : 1999,
        "actors" : [
                "Brad Pitt",
                "Edward Norton"
        ]
}
{
        "_id" : ObjectId("62a413ed8258c5366107fdfa"),
        "title" : "Inglorious Basterds",
        "writer" : "Quentin Tarantino",
        "year" : 2009,
        "actors" : [
                "Brad Pitt",
                "Diane Kruger",
                "Eli Roth"
        ]
}
> db.movies.find({"franchise":"The Hobbit"}).pretty()
{
        "_id" : ObjectId("62a413ed8258c5366107fdfb"),
        "title" : "The Hobbit:An Unexpected journey",
        "writer" : "J.R.R.Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "A reluctant hobbit,Bilbo Baggins,set out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug"
}
{
        "_id" : ObjectId("62a413ed8258c5366107fdfc"),
        "title" : "The Hobbit:The Desolation Of Smaug",
        "writer" : "J.R.R.Tolkein",
        "year" : 2013,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("62a413ed8258c5366107fdfd"),
        "title" : "The Hobbit:The Battle Of the Five Armies",
        "writer" : "J.R.R.Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Mountain from falling into the hands of a rising darkness"
}
> db.movies.find({"year":{$in:{$gt:1900},{$lt:2000}} }).pretty()
uncaught exception: SyntaxError: expected property name, got '{' :
@(shell):1:39
> db.movies.find({year:{$in:{$gt:1900},$lt:2000} }).pretty()
Error: error: {
        "ok" : 0,
        "errmsg" : "$in needs an array",
        "code" : 2,
        "codeName" : "BadValue"
}
> db.movies.find({year:{$gt:1900,$lt:2000} }).pretty()
{
        "_id" : ObjectId("62a413ed8258c5366107fdf8"),
        "title" : "Fight Club",
        "writer" : "Chuck Palahniuko",
        "year" : 1999,
        "actors" : [
                "Brad Pitt",
                "Edward Norton"
        ]
}
{
        "_id" : ObjectId("62a413ed8258c5366107fdf9"),
        "title" : "Pulp Fiction",
        "eriter" : "Quentin Tarantino",
        "year" : 1994,
        "actors" : [
                "Jhon Travolta",
                "Uma Thurman"
        ],
        "actor" : "Samuel L.jackson"
}
> db.movies.find({year:{$gt:2010},{$lt:2000} }).pretty()
uncaught exception: SyntaxError: expected property name, got '{' :
@(shell):1:32
> db.movies.find({year:{{$gt:2010},{$lt:2000}} }).pretty()
uncaught exception: SyntaxError: expected property name, got '{' :
@(shell):1:22
> db.movies.find({$or:[{year:{$lt:2000},{$gt:2010}}] })
uncaught exception: SyntaxError: expected property name, got '{' :
@(shell):1:38
> db.movies.find({$or:[{year:{$lt:2000}},{year:{$gt:2010}}] })
{ "_id" : ObjectId("62a413ed8258c5366107fdf8"), "title" : "Fight Club", "writer" : "Chuck Palahniuko", "year" : 1999, "actors" : [ "Brad Pitt", "Edward Norton" ] }
{ "_id" : ObjectId("62a413ed8258c5366107fdf9"), "title" : "Pulp Fiction", "eriter" : "Quentin Tarantino", "year" : 1994, "actors" : [ "Jhon Travolta", "Uma Thurman" ], "actor" : "Samuel L.jackson" }
{ "_id" : ObjectId("62a413ed8258c5366107fdfb"), "title" : "The Hobbit:An Unexpected journey", "writer" : "J.R.R.Tolkein", "year" : 2012, "franchise" : "The Hobbit", "synopsis" : "A reluctant hobbit,Bilbo Baggins,set out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug" }
{ "_id" : ObjectId("62a413ed8258c5366107fdfc"), "title" : "The Hobbit:The Desolation Of Smaug", "writer" : "J.R.R.Tolkein", "year" : 2013, "franchise" : "The Hobbit" }
{ "_id" : ObjectId("62a413ed8258c5366107fdfd"), "title" : "The Hobbit:The Battle Of the Five Armies", "writer" : "J.R.R.Tolkein", "year" : 2012, "franchise" : "The Hobbit", "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Mountain from falling into the hands of a rising darkness" }
> db.movies.find({$or:[{year:{$lt:2000}},{year:{$gt:2010}}] }).pretty()
{
        "_id" : ObjectId("62a413ed8258c5366107fdf8"),
        "title" : "Fight Club",
        "writer" : "Chuck Palahniuko",
        "year" : 1999,
        "actors" : [
                "Brad Pitt",
                "Edward Norton"
        ]
}
{
        "_id" : ObjectId("62a413ed8258c5366107fdf9"),
        "title" : "Pulp Fiction",
        "eriter" : "Quentin Tarantino",
        "year" : 1994,
        "actors" : [
                "Jhon Travolta",
                "Uma Thurman"
        ],
        "actor" : "Samuel L.jackson"
}
{
        "_id" : ObjectId("62a413ed8258c5366107fdfb"),
        "title" : "The Hobbit:An Unexpected journey",
        "writer" : "J.R.R.Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "A reluctant hobbit,Bilbo Baggins,set out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug"
}
{
        "_id" : ObjectId("62a413ed8258c5366107fdfc"),
        "title" : "The Hobbit:The Desolation Of Smaug",
        "writer" : "J.R.R.Tolkein",
        "year" : 2013,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("62a413ed8258c5366107fdfd"),
        "title" : "The Hobbit:The Battle Of the Five Armies",
        "writer" : "J.R.R.Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Mountain from falling into the hands of a rising darkness"
}
> db.movies.find({$synopsis:{$search:"Bilbo"} }).pretty()
Error: error: {
        "ok" : 0,
        "errmsg" : "unknown top level operator: $synopsis. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.",
        "code" : 2,
        "codeName" : "BadValue"
}
> db.movies.find({$synopsis:{$getField:"Bilbo"} }).pretty()
Error: error: {
        "ok" : 0,
        "errmsg" : "unknown top level operator: $synopsis. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.",
        "code" : 2,
        "codeName" : "BadValue"
}
> db.movies.find({$getField:{$synopsis:"Bilbo"} }).pretty()
Error: error: {
        "ok" : 0,
        "errmsg" : "unknown top level operator: $getField. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.",
        "code" : 2,
        "codeName" : "BadValue"
}
> db.movies.find({synopsis:{$regex:"Bilbo"} }).pretty()
{
        "_id" : ObjectId("62a413ed8258c5366107fdfb"),
        "title" : "The Hobbit:An Unexpected journey",
        "writer" : "J.R.R.Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "A reluctant hobbit,Bilbo Baggins,set out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug"
}
{
        "_id" : ObjectId("62a413ed8258c5366107fdfd"),
        "title" : "The Hobbit:The Battle Of the Five Armies",
        "writer" : "J.R.R.Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Mountain from falling into the hands of a rising darkness"
}
> db.movies.find({synopsis:{$regex:"Gandalf"} }).pretty()
> db.movies.find({synopsis:{$regex:"Bilbo"},$not:{$regex:"Gandalf"} }).pretty()
Error: error: {
        "ok" : 0,
        "errmsg" : "unknown top level operator: $not. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.",
        "code" : 2,
        "codeName" : "BadValue"
}
> db.movies.find({synopsis:{$nin:["Gandalf","Bilbo"]} }).pretty()
{
        "_id" : ObjectId("62a413ed8258c5366107fdf8"),
        "title" : "Fight Club",
        "writer" : "Chuck Palahniuko",
        "year" : 1999,
        "actors" : [
                "Brad Pitt",
                "Edward Norton"
        ]
}
{
        "_id" : ObjectId("62a413ed8258c5366107fdf9"),
        "title" : "Pulp Fiction",
        "eriter" : "Quentin Tarantino",
        "year" : 1994,
        "actors" : [
                "Jhon Travolta",
                "Uma Thurman"
        ],
        "actor" : "Samuel L.jackson"
}
{
        "_id" : ObjectId("62a413ed8258c5366107fdfa"),
        "title" : "Inglorious Basterds",
        "writer" : "Quentin Tarantino",
        "year" : 2009,
        "actors" : [
                "Brad Pitt",
                "Diane Kruger",
                "Eli Roth"
        ]
}
{
        "_id" : ObjectId("62a413ed8258c5366107fdfb"),
        "title" : "The Hobbit:An Unexpected journey",
        "writer" : "J.R.R.Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "A reluctant hobbit,Bilbo Baggins,set out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug"
}
{
        "_id" : ObjectId("62a413ed8258c5366107fdfc"),
        "title" : "The Hobbit:The Desolation Of Smaug",
        "writer" : "J.R.R.Tolkein",
        "year" : 2013,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("62a413ed8258c5366107fdfd"),
        "title" : "The Hobbit:The Battle Of the Five Armies",
        "writer" : "J.R.R.Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Mountain from falling into the hands of a rising darkness"
}
{
        "_id" : ObjectId("62a413ed8258c5366107fdfe"),
        "title" : "Pee Wee Herman's Big Adventure"
}
{ "_id" : ObjectId("62a413ed8258c5366107fdff"), "title" : "Avatar" }
> db.movies.find({synopsis:{$nin:"Bilbo"},synopsis:{$regex:"Bilbo"} }).pretty()
{
        "_id" : ObjectId("62a413ed8258c5366107fdfb"),
        "title" : "The Hobbit:An Unexpected journey",
        "writer" : "J.R.R.Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "A reluctant hobbit,Bilbo Baggins,set out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug"
}
{
        "_id" : ObjectId("62a413ed8258c5366107fdfd"),
        "title" : "The Hobbit:The Battle Of the Five Armies",
        "writer" : "J.R.R.Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Mountain from falling into the hands of a rising darkness"
}
> db.movies.find({ synopsis:{$regex:["dwarves","hobbit"],$options:"$i"} }).pretty()
Error: error: {
        "ok" : 0,
        "errmsg" : "$regex has to be a string",
        "code" : 2,
        "codeName" : "BadValue"
}
> db.movies.find({ synopsis:{$regex:"dwarves","hobbit",$options:"$i"} }).pretty()
uncaught exception: SyntaxError: missing : after property id :
@(shell):1:52
> db.movies.find({ synopsis:{$regex:{"dwarves","hobbit"},$options:"$i"} }).pretty()
uncaught exception: SyntaxError: missing : after property id :
@(shell):1:44
> db.movies.find({ synopsis:{{$regex:"dwarves"},{$regex:"hobbit"},$options:"$i"} }).pretty()
uncaught exception: SyntaxError: expected property name, got '{' :
@(shell):1:27
> db.movies.find({ synopsis:{$regex:"dwarves"},{$regex:"hobbit"},$options:"$i" }).pretty()
uncaught exception: SyntaxError: expected property name, got '{' :
@(shell):1:45
> db.movies.find({ synopsis:{$in:["dwarves","hobbit"]} }).pretty()
> db.movies.find({$or:[{ synopsis:{$regex:"dwarves"},{$regex:"hobbit"},$options:"$i" }).pretty()
... db.movies.find({ synopsis:{{$regex:"dwarves"},{$regex:"hobbit"},$options:"$i"} }).pretty()
...
...
> db.movies.find({ synopsis:{$regex:"dwarves"},$options:"$i" }).pretty()
Error: error: {
        "ok" : 0,
        "errmsg" : "unknown top level operator: $options. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.",
        "code" : 2,
        "codeName" : "BadValue"
}
> db.movies.find({franchise:"The Hobbit"})
{ "_id" : ObjectId("62a413ed8258c5366107fdfb"), "title" : "The Hobbit:An Unexpected journey", "writer" : "J.R.R.Tolkein", "year" : 2012, "franchise" : "The Hobbit", "synopsis" : "A reluctant hobbit,Bilbo Baggins,set out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug" }
{ "_id" : ObjectId("62a413ed8258c5366107fdfc"), "title" : "The Hobbit:The Desolation Of Smaug", "writer" : "J.R.R.Tolkein", "year" : 2013, "franchise" : "The Hobbit" }
{ "_id" : ObjectId("62a413ed8258c5366107fdfd"), "title" : "The Hobbit:The Battle Of the Five Armies", "writer" : "J.R.R.Tolkein", "year" : 2012, "franchise" : "The Hobbit", "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Mountain from falling into the hands of a rising darkness" }
> db.movies.find({franchise:"The Hobbit"}).pretty()
{
        "_id" : ObjectId("62a413ed8258c5366107fdfb"),
        "title" : "The Hobbit:An Unexpected journey",
        "writer" : "J.R.R.Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "A reluctant hobbit,Bilbo Baggins,set out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug"
}
{
        "_id" : ObjectId("62a413ed8258c5366107fdfc"),
        "title" : "The Hobbit:The Desolation Of Smaug",
        "writer" : "J.R.R.Tolkein",
        "year" : 2013,
        "franchise" : "The Hobbit"
}
{
        "_id" : ObjectId("62a413ed8258c5366107fdfd"),
        "title" : "The Hobbit:The Battle Of the Five Armies",
        "writer" : "J.R.R.Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Mountain from falling into the hands of a rising darkness"
}
> db.movies.update({_id:ObjectId("5c9f98e5e5c2dfe9b3729bfe")}, {$set:{synopsis:"A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."}})
WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 0 })
> db.movies.update({_id:ObjectId("5c9fa42ae5c2dfe9b3729c03")}, {$set:{synopsis:"The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."}})
WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 0 })
> db.movies.update({"_id" : ObjectId("62a413ed8258c5366107fdfc")},{$set:{synopsis:"The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."}}).pretty()
uncaught exception: TypeError: db.movies.update(...).pretty is not a function :
@(shell):1:1
> db.movies.update({"_id" : ObjectId("62a413ed8258c5366107fdfc")},{$set:{synopsis:"The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 0 })
> db.movies.update({"_id" : ObjectId("62a413ed8258c5366107fdf9")},{$push:{actors:"Samuel L. Jackson"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.movies.find({synopsis:{$regex:"Bilbo"}})
{ "_id" : ObjectId("62a413ed8258c5366107fdfb"), "title" : "The Hobbit:An Unexpected journey", "writer" : "J.R.R.Tolkein", "year" : 2012, "franchise" : "The Hobbit", "synopsis" : "A reluctant hobbit,Bilbo Baggins,set out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug" }
{ "_id" : ObjectId("62a413ed8258c5366107fdfc"), "title" : "The Hobbit:The Desolation Of Smaug", "writer" : "J.R.R.Tolkein", "year" : 2013, "franchise" : "The Hobbit", "synopsis" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring." }
{ "_id" : ObjectId("62a413ed8258c5366107fdfd"), "title" : "The Hobbit:The Battle Of the Five Armies", "writer" : "J.R.R.Tolkein", "year" : 2012, "franchise" : "The Hobbit", "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Mountain from falling into the hands of a rising darkness" }
> db.movies.find({synopsis:{$regex:"Bilbo"}}).pretty()
{
        "_id" : ObjectId("62a413ed8258c5366107fdfb"),
        "title" : "The Hobbit:An Unexpected journey",
        "writer" : "J.R.R.Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "A reluctant hobbit,Bilbo Baggins,set out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug"
}
{
        "_id" : ObjectId("62a413ed8258c5366107fdfc"),
        "title" : "The Hobbit:The Desolation Of Smaug",
        "writer" : "J.R.R.Tolkein",
        "year" : 2013,
        "franchise" : "The Hobbit",
        "synopsis" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."
}
{
        "_id" : ObjectId("62a413ed8258c5366107fdfd"),
        "title" : "The Hobbit:The Battle Of the Five Armies",
        "writer" : "J.R.R.Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Mountain from falling into the hands of a rising darkness"
}
> db.movies.find({synopsis:{$regex:"Gandalf"}}).pretty()
{
        "_id" : ObjectId("62a413ed8258c5366107fdfc"),
        "title" : "The Hobbit:The Desolation Of Smaug",
        "writer" : "J.R.R.Tolkein",
        "year" : 2013,
        "franchise" : "The Hobbit",
        "synopsis" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."
}
> db.movies.find({$and:[{synopsis:{$regex:"Bilbo"}}, {synopsis:{$not:/Gandalf/}}]}).pretty()
{
        "_id" : ObjectId("62a413ed8258c5366107fdfb"),
        "title" : "The Hobbit:An Unexpected journey",
        "writer" : "J.R.R.Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "A reluctant hobbit,Bilbo Baggins,set out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug"
}
{
        "_id" : ObjectId("62a413ed8258c5366107fdfd"),
        "title" : "The Hobbit:The Battle Of the Five Armies",
        "writer" : "J.R.R.Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Mountain from falling into the hands of a rising darkness"
}
> db.movies.find({$and:[{synopsis:{$regex:"gold"}}, {synopsis:{$regex:"dragon"}}]}).pretty()
{
        "_id" : ObjectId("62a413ed8258c5366107fdfb"),
        "title" : "The Hobbit:An Unexpected journey",
        "writer" : "J.R.R.Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit",
        "synopsis" : "A reluctant hobbit,Bilbo Baggins,set out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug"
}
> db.movies.remove({_id:ObjectId("5c9f992ae5c2dfe9b3729c00")}).pretty()
uncaught exception: TypeError: db.movies.remove(...).pretty is not a function :
@(shell):1:1
> db.movies.remove({_id:ObjectId("5c9f992ae5c2dfe9b3729c00")}).pretty()
uncaught exception: TypeError: db.movies.remove(...).pretty is not a function :
@(shell):1:1
> db.movies.remove({"_id" : ObjectId("62a413ed8258c5366107fdfe")})
WriteResult({ "nRemoved" : 1 })
> db.users.insert({_id:1,username:"GoodGuyGreg", first_name:"Good Guy", last_name:"Greg"})
WriteResult({ "nInserted" : 1 })
> db.users.insert({_id:2, username:"ScumbagSteve", fullname:{first: "Scumbag", last:"Steve"}})
WriteResult({ "nInserted" : 1 })
> db.posts.insert({username:"GoodGuyGreg", title:"Passes out at Party", body:"Raises your credit score"})
WriteResult({ "nInserted" : 1 })
> db.posts.insert({ username:"GoodGuyGreg", title:"Steals your identity", body:"Raises your credit score"})
WriteResult({ "nInserted" : 1 })
> db.posts.insert({username:"GoodGuyGreg", title:"Reports a bug in your code", body:"Sends you a pull request"})
WriteResult({ "nInserted" : 1 })
> db.posts.insert({ username:"ScumbagSteve", title:"Borrows something", body:"Sells it"})
WriteResult({ "nInserted" : 1 })
> db.posts.insert({ username:"ScumbagSteve", title:"Borrows everything", body:"The end"})
WriteResult({ "nInserted" : 1 })
> db.posts.insert({username:"ScumbagSteve", title:"Forks your repo on github", body:"Sets to private"})
WriteResult({ "nInserted" : 1 })
> db.posts.find().pretty()
{
        "_id" : ObjectId("62a6b41aecfaa71c8777c862"),
        "username" : "GoodGuyGreg",
        "title" : "Passes out at Party",
        "body" : "Raises your credit score"
}
{
        "_id" : ObjectId("62a6b42becfaa71c8777c863"),
        "username" : "GoodGuyGreg",
        "title" : "Steals your identity",
        "body" : "Raises your credit score"
}
{
        "_id" : ObjectId("62a6b454ecfaa71c8777c864"),
        "username" : "GoodGuyGreg",
        "title" : "Reports a bug in your code",
        "body" : "Sends you a pull request"
}
{
        "_id" : ObjectId("62a6b462ecfaa71c8777c865"),
        "username" : "ScumbagSteve",
        "title" : "Borrows something",
        "body" : "Sells it"
}
{
        "_id" : ObjectId("62a6b474ecfaa71c8777c866"),
        "username" : "ScumbagSteve",
        "title" : "Borrows everything",
        "body" : "The end"
}
{
        "_id" : ObjectId("62a6b48decfaa71c8777c867"),
        "username" : "ScumbagSteve",
        "title" : "Forks your repo on github",
        "body" : "Sets to private"
}
> db.comments.insert({ username:"GoodGuyGreg", comment:"Hope you got a good deal!", post:ObjectId("62a6b41aecfaa71c8777c862")})
WriteResult({ "nInserted" : 1 })
> db.comments.insert({username:"GoodGuyGreg", comment:"What's mine is yours!", post:ObjectId("62a6b42becfaa71c8777c863")})
WriteResult({ "nInserted" : 1 })
> db.comments.insert({username:"GoodGuyGreg", comment:"Don't violate the licensing agreement!", post:ObjectId("62a6b454ecfaa71c8777c864")})
WriteResult({ "nInserted" : 1 })
> db.comments.insert({username:"ScumbagSteve", comment:"It still isn't clean", post:ObjectId("62a6b462ecfaa71c8777c865")})
WriteResult({ "nInserted" : 1 })
> db.comments.insert({username:"ScumbagSteve", comment:"Denied your PR cause I found a hack", post:ObjectId("62a6b454ecfaa71c8777c864")})
WriteResult({ "nInserted" : 1 })
> db.users.find().pretty()
{
        "_id" : 1,
        "username" : "GoodGuyGreg",
        "first_name" : "Good Guy",
        "last_name" : "Greg"
}
{
        "_id" : 2,
        "username" : "ScumbagSteve",
        "fullname" : {
                "first" : "Scumbag",
                "last" : "Steve"
        }
}
> db.posts.find().pretty()
{
        "_id" : ObjectId("62a6b41aecfaa71c8777c862"),
        "username" : "GoodGuyGreg",
        "title" : "Passes out at Party",
        "body" : "Raises your credit score"
}
{
        "_id" : ObjectId("62a6b42becfaa71c8777c863"),
        "username" : "GoodGuyGreg",
        "title" : "Steals your identity",
        "body" : "Raises your credit score"
}
{
        "_id" : ObjectId("62a6b454ecfaa71c8777c864"),
        "username" : "GoodGuyGreg",
        "title" : "Reports a bug in your code",
        "body" : "Sends you a pull request"
}
{
        "_id" : ObjectId("62a6b462ecfaa71c8777c865"),
        "username" : "ScumbagSteve",
        "title" : "Borrows something",
        "body" : "Sells it"
}
{
        "_id" : ObjectId("62a6b474ecfaa71c8777c866"),
        "username" : "ScumbagSteve",
        "title" : "Borrows everything",
        "body" : "The end"
}
{
        "_id" : ObjectId("62a6b48decfaa71c8777c867"),
        "username" : "ScumbagSteve",
        "title" : "Forks your repo on github",
        "body" : "Sets to private"
}
> db.posts.find({username:"GoodGuyGreg"})
{ "_id" : ObjectId("62a6b41aecfaa71c8777c862"), "username" : "GoodGuyGreg", "title" : "Passes out at Party", "body" : "Raises your credit score" }
{ "_id" : ObjectId("62a6b42becfaa71c8777c863"), "username" : "GoodGuyGreg", "title" : "Steals your identity", "body" : "Raises your credit score" }
{ "_id" : ObjectId("62a6b454ecfaa71c8777c864"), "username" : "GoodGuyGreg", "title" : "Reports a bug in your code", "body" : "Sends you a pull request" }
> db.posts.find({username:"GoodGuyGreg"}).pretty()
{
        "_id" : ObjectId("62a6b41aecfaa71c8777c862"),
        "username" : "GoodGuyGreg",
        "title" : "Passes out at Party",
        "body" : "Raises your credit score"
}
{
        "_id" : ObjectId("62a6b42becfaa71c8777c863"),
        "username" : "GoodGuyGreg",
        "title" : "Steals your identity",
        "body" : "Raises your credit score"
}
{
        "_id" : ObjectId("62a6b454ecfaa71c8777c864"),
        "username" : "GoodGuyGreg",
        "title" : "Reports a bug in your code",
        "body" : "Sends you a pull request"
}
> db.posts.find({username:"ScumbagSteve"}).pretty()
{
        "_id" : ObjectId("62a6b462ecfaa71c8777c865"),
        "username" : "ScumbagSteve",
        "title" : "Borrows something",
        "body" : "Sells it"
}
{
        "_id" : ObjectId("62a6b474ecfaa71c8777c866"),
        "username" : "ScumbagSteve",
        "title" : "Borrows everything",
        "body" : "The end"
}
{
        "_id" : ObjectId("62a6b48decfaa71c8777c867"),
        "username" : "ScumbagSteve",
        "title" : "Forks your repo on github",
        "body" : "Sets to private"
}
> db.comments.find().pretty()
{
        "_id" : ObjectId("62a6b588ecfaa71c8777c868"),
        "username" : "GoodGuyGreg",
        "comment" : "Hope you got a good deal!",
        "post" : ObjectId("62a6b41aecfaa71c8777c862")
}
{
        "_id" : ObjectId("62a6b5b5ecfaa71c8777c869"),
        "username" : "GoodGuyGreg",
        "comment" : "What's mine is yours!",
        "post" : ObjectId("62a6b42becfaa71c8777c863")
}
{
        "_id" : ObjectId("62a6b5d7ecfaa71c8777c86a"),
        "username" : "GoodGuyGreg",
        "comment" : "Don't violate the licensing agreement!",
        "post" : ObjectId("62a6b454ecfaa71c8777c864")
}
{
        "_id" : ObjectId("62a6b5fbecfaa71c8777c86b"),
        "username" : "ScumbagSteve",
        "comment" : "It still isn't clean",
        "post" : ObjectId("62a6b462ecfaa71c8777c865")
}
{
        "_id" : ObjectId("62a6b63becfaa71c8777c86c"),
        "username" : "ScumbagSteve",
        "comment" : "Denied your PR cause I found a hack",
        "post" : ObjectId("62a6b454ecfaa71c8777c864")
}


